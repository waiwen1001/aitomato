// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outlets Outlet[]

  @@map("restaurants")
}

model Outlet {
  id           String   @id @default(uuid())
  name         String
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  menus      Menu[]
  orders     Order[]
  floors     Floor[]

  @@map("outlets")
}

model Category {
  id        String   @id @default(uuid())
  outletId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menus Menu[]

  @@map("categories")
}

model Menu {
  id        String   @id @default(uuid())
  outletId  String
  categoryId String?
  name        String
  price       Decimal
  description String?
  available   Boolean  @default(true)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  outlet     Outlet      @relation(fields: [outletId], references: [id])
  orderItems OrderItem[]
  images     MenuImage[]
  category   Category?  @relation(fields: [categoryId], references: [id])
  
  @@map("menus")
}

model MenuImage {
  id        String   @id @default(uuid())
  menuId    String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  menu Menu @relation(fields: [menuId], references: [id])

  @@map("menu_images")
}

model Order {
  id        String   @id @default(uuid())
  outletId  String
  Subtotal  Decimal
  Tax       Decimal
  GST       Decimal
  Total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outlet     Outlet      @relation(fields: [outletId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  menuId    String
  price     Decimal
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  menu  Menu  @relation(fields: [menuId], references: [id])

  @@map("order_items")
}

model Floor {
  id        String   @id @default(uuid())
  outletId  String
  floor     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outlet Outlet  @relation(fields: [outletId], references: [id])
  tables Table[]

  @@unique([outletId, floor])
  @@map("floors")
}

model Table {
  id                String      @id @default(uuid())
  outletId          String
  floorId           String
  type              String
  seq               Int
  pax               Int
  status            String
  merge             Json?
  x_position        Int
  y_position        Int
  width             Int
  height            Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  floor            Floor   @relation(fields: [floorId], references: [id])
  queue            Queue[]

  @@map("tables")
}

model Queue {
  id                String      @id @default(uuid())
  outletId          String
  pax               Int
  phoneNumber       String
  queueNumber       String
  seq               Int
  status            QueueStatus
  tableId           String?
  estimatedWaitTime DateTime?
  completedAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  table Table? @relation(fields: [tableId], references: [id])

  @@map("queues")
}

enum QueueStatus {
  PENDING
  PROCESSING
  CANCELLED
  COMPLETED
  TIMEOUT
}

enum TableStatus {
  AVAILABLE
  ONHOLD
  OCCUPIED
  MAINTENANCE
}
